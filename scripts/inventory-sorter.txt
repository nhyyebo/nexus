local UserInputService = game:GetService("UserInputService")

local Sorting = {
    Enabled = true,
    Keybind = Enum.KeyCode.Equals,
    Slots = {
        [1] = "[Double-Barrel SG]",
        [2] = "[Revolver]",
        [3] = "[Cookie]",
        [4] = "[Chicken]",
        [5] = "[Chicken]",
        [6] = "[Pizza]",
        [7] = "[Pizza]",
        [8] = "",
        [9] = "",
        [0] = "[Katana]",
    }
}

local function sortInventory()
    if not Sorting.Enabled then
        return
    end

    local player = game.Players.LocalPlayer
    local backpack = player:FindFirstChildOfClass("Backpack")
    if not backpack then
        return
    end

    local originalItems = {}
    for _, tool in ipairs(backpack:GetChildren()) do
        table.insert(originalItems, tool)
    end
    for _, tool in ipairs(backpack:GetChildren()) do
        tool.Parent = nil
    end

    for i = 1, 10 do
        local slot = Sorting.Slots[i % 10] -- Slot 0 for the 10th slot
        if slot ~= "" then
            for index, tool in ipairs(originalItems) do
                if tool.Name == slot then
                    tool.Parent = backpack
                    table.remove(originalItems, index)
                    break
                end
            end
        end
    end

    for _, tool in ipairs(originalItems) do
        tool.Parent = backpack
    end
end

UserInputService.InputBegan:Connect(function(input, isProcessed)
    if not isProcessed and input.KeyCode == Sorting.Keybind then
        sortInventory()
    end
end)